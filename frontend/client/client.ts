// This client was generated by Platformatic from an OpenAPI specification.

import type { Client } from './client-types'
import type * as Types from './client-types'

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
export const setBaseUrl = (newUrl: string) : void => { baseUrl = newUrl }
/* @ts-ignore */
function headersToJSON(headers: Headers): Object {
  const output = {} as any
  headers.forEach((value, key) => {
    output[key] = value
  })
  return output
}

const _getCheck = async (url: string, request: Types.GetCheckRequest): Promise<Types.GetCheckResponses> => {
  const queryParameters: (keyof Types.GetCheckRequest)[]  = ['ping']
  const searchParams = new URLSearchParams()
  queryParameters.forEach((qp) => {
    if (request[qp]) {
      searchParams.append(qp, request[qp]?.toString() || '')
      delete request[qp]
    }
  })


  const response = await fetch(`${url}/check?${searchParams.toString()}`)

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const getCheck: Client['getCheck'] = async (request: Types.GetCheckRequest): Promise<Types.GetCheckResponses> => {
  return await _getCheck(baseUrl, request)
}
const _postExample = async (url: string, request: Types.PostExampleRequest): Promise<Types.PostExampleResponses> => {
  const headers = {
    'Content-type': 'application/json; charset=utf-8'
  }

  const response = await fetch(`${url}/example`, {
    method: 'POST',
    body: JSON.stringify(request),
    headers
  })

  if (!response.ok) {
    throw new Error(await response.text())
  }

  return await response.json()
}

export const postExample: Client['postExample'] = async (request: Types.PostExampleRequest): Promise<Types.PostExampleResponses> => {
  return await _postExample(baseUrl, request)
}
export default function build (url: string) {
  return {
    getCheck: _getCheck.bind(url, ...arguments),
    postExample: _postExample.bind(url, ...arguments)
  }
}